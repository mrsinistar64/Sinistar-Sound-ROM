;
;	 SSSS  IIIII  N   N  IIIII   SSSS  TTTTT   AAA   RRRR
;	S        I    NN  N    I    S        T    A   A  R   R
;	 SSS     I    N N N    I     SSS     T    AAAAA  RRRR
;	    S    I    N  NN    I        S    T    A   A  R  R
;	SSSS   IIIII  N   N  IIIII  SSSS     T    A   A  R   R
;
;   SINISTAR WALSH FUNCTION ROUTINE (Started by SynaMax - 07/16/2023)
;
;	6800 Assembly code to build the Walsh Function Sound Machine
;	found in Sinistar's sound rom.
;
;	Programmed by Tim Murphy and John Kotlarik
;	Sinistar Sound Design/Programming by Mike Metz
;
;	Uncomment "STEREO EQU 1" to build SINWALSH for VSNDRM10.
;
;;---------------------------------------------------------------------
;
;	Mike Metz copied the Walsh synth code that was originally used for
;	the Ostrich Skid and Pterodactyl Scream in Joust.  It generates
;	sound by using Walsh functions with square waves rather than
;	Fourier functions with sine waves.
;
;	During normal gameplay, this routine is only used for the
;	"Extra Ship" sound effect.  When the speech board is disconnected,
;	the rarely used "ERROAR" plays in place of the Sinistar's roar.
;
;	It appears Mike was experimenting with different variations of
;	these sounds, as seen in the WALSHT table.  Mike also messed around
;	with the ODDTBL, corrupting the original values found in Joust.
;
;	It should be possible to take this code and rebuild it for Joust,
;	you would just need to replace WORG, ODDTBL, WALSHT, and the
;	Wave Programs with the Pterodactyl Scream and Ostrich Skid presets.
;
;	John Kotlarik was the person who found out about the Walsh synthesis
;	technique after reading an article from Computer Music Journal.
;	He shared the article with Tim Murphy, who came up with the code
;	you're looking at now.  Here's an interview with John on how he
;	designed some of Joust's sound effects:
;	https://joustmaster.com/john-kotlarik/
;
;;---------------------------------------------------------------------
;
;	Creating good new sounds for this routine is surprisingly difficult.
;	Presets require Waveform and Pitch Programs to generate sound and
;	they are defined through hard-to-understand macros like this:
;
; 	LBL	SCREMP
;	NOT 	60
;	LDV 	-512
;	WAIT 	16
;	LDV 	0
;	WAIT 	100
;	LBL 	SCRMA
;	LDV 	80
;	DO 	13,PPLD
;	LDV 	64
;	DO 	4,PPLD
;	STOP
;
;	These macro commands are then converted into psuedo-opcodes that
;	the Walsh routine parses to produce audio.  The story goes that
;	Mike Metz broke his workstation during Sinistar's development
;	because he was trying to purposely corrupt data to use for new
;	strange sounds.  This is how the "Extra Ship" noise was made,
;	according to Noah Falstein.  Considering how challenging it is
;	to make a preset compared to another routine like GWAVE, it's easy
;	to understand why Mike took the risk of repeatedly power-cycling
;	his computer to craft unusual new sounds.
;
;	Unfortunately, vasm6800_oldstyle doesn't support some of the macros
;	directives like IRPC, so the macros have been commented out.
;
;	The Wave and Pitch programs for Sinistar are copied over as raw
;	data via FDB and FCB, with comments to represent what the
;	theoretical macro commands should be.  There's a bit of guesswork
;	involved with what this code actually means, so don't 
;
;;---------------------------------------------------------------------
;
;	To build SINWALSH, download vasm and run this command line:
;
;	vasm6800_oldstyle -ast -Fbin -o sinwalsh.bin sinwalsh.src
;
;	Then, paste the sinwalsh.bin data into vsndrm9.bin at $F1DD.
;
;	Even though the Walsh Function is not used in VSNDRM10, the code
;	still exists.  When building SINWALSH for VSNDRM10, you must also
;	define "STEREO	EQU	1" in both source files, so that the binary
;	data stays aligned.
;
;	SINWALSH data for VSNDRM10 starts two bytes earlier at $F1DB.
;
;;---------------------------------------------------------------------

*SYSTEM CONSTANTS
*
;STEREO	EQU	1			;;(use this to build VSNDRM10)
*
*	NAM	WALSH FUNCTION SOUND MACHINE V2

* T. MURPHY  11/10/81

MINPER	EQU	25			;6*25 = 150 MICROSECS IS MIN SAMPLE PERIOD
SOUND	SET	$400

	IFNDEF	STEREO			
WORG	EQU	$F1DD	
	ELSE
WORG	EQU	$F1DB
	ENDIF

	ORG	0

	RMB	8			;GLOBALS

FCMDPT	RMB	2			;PTR TO CURRENT FILTER COMMAND (USER INITIALIZED)
PCMDPT	RMB	2			;SAME FOR PITCH PROGRAM
SMPPER	RMB	2			;HI BYTE * 6 IS SAMPLE DELAY
HRMTBL	RMB	2			;PTR TO HARMONIC FN VALUE TABLE

WAVSRT	RMB	16			;WAVEFORM

PERVEL	RMB	2			;ADDED TO SMPPER EACH WAVE (PITCH CONTROL)
GLBPRO	RMB	1			;GLOBAL PERIOD OFFSET
TMPPER	RMB	1			;= SMPPER + GLBPRO
PERACM	RMB	1			;USED TO CALCULATE SMALL PITCH ADJUSTS

PWVCNT	EQU	*			;#OF WAVES TO PLAY BEFORE NEXT PITCH CMD (P PROGRAM)
PSTK	RMB	2			;TOP OF PITCH RETURN/COUNT STACK
PWAVPT	RMB	2			;PTR TO CURRENT SAMPLE BEING PLAYED
PCMD	RMB	1			;CURRENT PITCH CMD
PTEMP	RMB	2

FVECT	RMB	3			;JUMP TO CURRENT FILTER STATE (FILTER PGM CONTROL)
FCNT	EQU	*			;MISC CTR, WAVE DELAY IF <0
FSTK	RMB	2			;TOP OF FILTER RETURN/COUNT STACK
HAPTR	RMB	2			;PTR TO AMPLITUDE OF CURRENT HARMONIC

FWVPTR	RMB	2			;PTS TO WAVE PT BEING ALTERED (FILTER GUTS)
HAMP	RMB	1			;CURRENT HARMONIC AMPLITUDE
FMSK	RMB	1			;BIT MASK SELECTS HARMONIC FN VALUE
*			NEXT 3 MUST BE IN ORDER
FNHI	RMB	1			;HOLDS CURRENT HARMONIC FN VALUES AS BITS
FNLO	RMB	1			;ALSO USED AS TEMPORARIES
FCMD	RMB	1			;CURRENT INSTRUCTION BEING EXECUTED

FBTM	EQU	*-3			;FILTER STACK GROWS UP

	RORG	95
		
PBTM	EQU	*			;PITCH STACK GROWS DOWN

	RMB	1			;ADD2HA FOR CONST WAVE
ADD2HA	RMB	8			;ADD ADD2HA(8-I)*HARM(I) TO WAVE
CNAMP	RMB	1			;CURRENT AMP OF CONST FUNCTION
CURHA	RMB	8			;CURHA(8-I) = <WAVE!HARM(I)>

ENDRAM	SET	127

	REND

	ORG 	WORG

	SUBTTL	WAVE PLAYER AND PITCH MODIFICATION

* PLAY A SAMPLE, REMAINING DELAY IN B.  TOTAL DELAY = MIN (60,B*6) MICS.

NTHRVC	SUBB	#13			;LOOP DELAY IS 78 CYCLES
	PSHB
;;	JSR	FVECT			;(62)
	FCB	$BD			;;(had to change to get the right opcode)
	FDB	FVECT
	PULB

NXTSMP	CMPB	#20			;CALL HERE
	BHI	NTHRVC			;MODIFY WAVE IF WE HAVE ENOUGH TIME

	NOP
	LDAA	PERACM
	ADDA	PERVEL+1
	STAA	PERACM
	ADCB	#-10			;MINIMUM DELAY + FRACTION

	DECB				;WASTE SMALL TIME
	BPL	*-1

	LDAA	PWAVPT+1		;PT TO NEXT BYTE OF 16 BYTE WAVE
	INCA
	ANDA	#15
	ORAA	#WAVSRT			;! WAVSRT MUST BE DIVISIBLE BY 16 !
	STAA	PWAVPT+1

	LDX	PWAVPT
	LDAB	0,X
	STAB	SOUND

	ANDA	#15			;0 	;IFF RESTARTING WAVE
	RTS
	
* PLAYS WAVE AND ALTERS PITCH ACCORDING TO PITCH CMDS.
* SMPPER IS INITIAL PITCH,  PCMDPT IS START PITCH PROGRAM,
* FCMDPT IS START WAVE MODIFIER (FILTER) PROGRAM.

WSM	CLRA
	LDX	#WAVSRT
	LDAB	#CURHA+8-WAVSRT
1$	STAA	0,X
	INX
	DECB
	BNE	1$
	LDAB	#PBTM
	STAB	PSTK+1
	LDAB	#FBTM
	STAB	FSTK+1
	LDAB	#126
	STAB	FVECT
	LDX	#NXTFCM
	STX	FVECT+1
	LDAB	SMPPER
	STAB	TMPPER
	
PPLPE1	SUBB	#3
PPLPE2	JSR	NXTSMP
	INX

PPLP	LDAB	TMPPER
	SUBB	#2			;LOOP DELAY IS 18-6 = 12
	JSR	NTHRVC
	BNE	PPLP			;ESCAPE ON WAVE BOUNDARY

	LDAB	PERVEL			;7 (ALL TIMES ARE SINCE RTS FROM LAST NXTSMP)
	LDAA	PERVEL+1
	ADDA	SMPPER+1		;UPDATE SAMPLE RATE ONCE EACH WAVE PLAY
	ADCB	SMPPER
	STAA	SMPPER+1
	STAB	SMPPER			;24

	ADDB	GLBPRO
	LDAA	#MINPER			;AVOID SYNC ERRORS BY LIMITING PITCH.
	CBA				;MAX. PITCH ALLOWS AT LEAST 1 FILTER
	BCC	*+3			;CALL PER SAMPLE.
	FCB	129			;;(This disassembles as CMPA #$16)
	TAB				;;
	STAB	TMPPER			;41
	NOP
	SUBB	#9
	JSR	NXTSMP			;54

	LDAA	FCNT			;COUNT WAVE PLAYS FOR FILTER
	TAB				;(ONLY IF <0)
	ASLA
	ADCB	#0
	STAB	FCNT			;13

	LDAB	TMPPER
	SUBB	#5
	LDAA	PWVCNT
	BPL	PAWAKE

	INC	PWVCNT			;UPDATE DELAY COUNT IF <0
	NOP
	BRA	PPLPE1			;37

PAWAKE	DECB				;ELSE WE ARE ALIVE
	JSR	NXTSMP			;36

	LDX	PCMDPT
	LDAA	0,X
	BPL	PPLP1			;MOST CMDS ARE >0

	CMPA	#128
	BEQ	STOPR			;19	EXCEPT FOR END = 128

	INCA
	STAA	PWVCNT			;OR A NEGATIVE NUMBER -N
	INX				;WHICH WAITS N WAVE PLAYS
	FCB	-1,0,PCMDPT		;BEFORE FETCHING THE NEXT COMMAND

PPLP35	LDAB	TMPPER
	SUBB	#6
	JMP	PPLPE1			;43

PPLP1	INX
	LDAB	0,X			;GET NEXT CMD STRING BYTE ON STACK
	PSHB
	INX
	STX	PCMDPT			;35

	STAA	PCMD
	ANDA	#$70
	LSRA
	LSRA
	LSRA
	CLRB

	ADDA	#PCMDJT&255
	ADCB	#PCMDJT/256
	STAA	PTEMP+1
	STAB	PTEMP			;61

	LDAB	TMPPER
	LDAB	TMPPER
	SUBB	#13
	JSR	NXTSMP			;78

	CLRB
	LDX	PTEMP			;EXECUTE CMD
	LDX	0,X
	JMP	0,X			;16
		
* PITCH COMMAND ROUTINES.  UNLESS OTHERWISE STATED, N IS A SIGNED 8 BIT
* NUMBER = BYTE FOLLOWING OPCODE.

* LDP N  IS  SMPPER := N,  ADP N  IS SMPPER := SMPPER + N

LDPR	LDAA	PCMD			;BIT 0 = 1 FOR LOAD
	ASRA
	SBCB	#0
	ANDB	SMPPER
	PULA
	SBA
	ADDA	SMPPER
	STAA	SMPPER			;39
	INX
LDPRE	LDAB	TMPPER
	SUBB	#10
	JMP	PPLPE2			;51

* LDO N IS  GLBPRO := N,  ADO N IS  GLBPRO := GLBPRO + N

LDOR	LDAA	PCMD			;BIT 0 = 1 FOR LOAD
	ASRA
	SBCB	#0
	ANDB	GLBPRO
	PULA
	SBA
	ADDA	GLBPRO
	STAA	GLBPRO
	BRA	LDPRE

* ESC EXECUTES MACHINE LANGUAGE IMMEDIATELY FOLLOWING

ESCR	PULA
	LDX	PCMDPT
	DEX
	JMP	0,X			;32

* STOP EITHER REPEATS A CALL, RETURNS FROM A CALL, OR ENDS SOUND.

STOPR	LDAA	PSTK+1
	CMPA	#PBTM
	BMI	*+3			;28
	RTS

	LDAB	TMPPER
	SUBB	#7
	JSR	NXTSMP			;42
 
	LDX	PSTK
	DEC	2,X
	BMI	PRET			;15	DONE

	LDX	0,X			;ELSE REPEAT
	LDAA	0,X
	PSHA
	INX
	STX	PCMDPT			;39

	FCB	-10,0,TMPPER
	SUBB	#9
	JSR	NXTSMP			;54

	BRA	PTORE1

PRET	LDX	0,X
	INX
	STX	PCMDPT
	LDAA	PSTK+1
	ADDA	#3
	STAA	PSTK+1

	LDAB	TMPPER
	SUBB	#7
	NOP
	JMP	PPLPE1			;49

* LDV N IS  PERVEL := N,  ADV N IS  PERVEL := PERVEL + N
* IN THIS CASE  N IS A 12 BIT NUMBER, THE UPPER 4 BITS OF WHICH
* ARE LO 4 BITS OF THE OPCODE BYTE.

ADVR	INX
	BRA	*+6

LDVR	STAB	PERVEL			;CLEAR PERVEL FOR LOAD
	STAB	PERVEL+1 		;24

	LDAB	PCMD
	ANDB	#15			;SIGN EXTEND
	ADDB	#-8
	EORB	#-8			;34

	PULA
	ADDA	PERVEL+1
	ADCB	PERVEL
	STAA	PERVEL+1
	STAB	PERVEL			;52

	FCB	-10,0,TMPPER
	SUBB	#9
	JMP	PPLPE1			;61	

* DO R,N  CALLS RTN AT *+N  R TIMES.

PDOR	LDAA	PSTK+1
	SUBA	#3
	STAA	PSTK+1			;25

	LDX	PSTK
	LDAA	PCMDPT+1		;STACK ENTRY PTS TO DISPLACEMENT
	LDAB	PCMDPT
	ADDA	#-1
	ADCB	#-1
	STAB	0,X
	STAA	1,X			;53
	LDAB	PCMD			;LO OPCODE BITS ARE REPEAT CNT
	ANDB	#15
	STAB	2,X			;64

	LDAB	TMPPER
	SUBB	#12
	JSR	NXTSMP			;78

	INX				;SYNC W/NEXT RTN
PTORE1	INX
	INX
	CLRB
	NOP

* TO N  SETS LOC TO BE *+N.

PTOR	PULA				;20
	ASRA
	ROLA
	SBCB	#0
	ADDA	PCMDPT+1
	ADCB	PCMDPT	
	STAA	PCMDPT+1
	FCB	-9,0,PCMDPT ;41

	LDAB	TMPPER
	SUBB	#7
	JMP	PPLPE1			;49


PCMDJT	FDB		LDPR,LDOR,LDVR,ADVR,LDPR,ESCR,PDOR,PTOR
*		   	0    1    2    3    4    5  	 6    7
FCMDJT	FDB		ADHR,LDTR,ETBR,HIDR,FINR,ZTBR,FDOR,FTOR


	SUBTTL	WAVE MODIFICATION

* FENDR OVERLAY GETS RETURN ADDR FROM STACK.

FRTURN	LDX	FSTK
	LDX	3,X
	INX				;NEXT INSTR IS AFTER DISPLACEMENT BYTE
	STX	FCMDPT			;19
	JSR	FCMDNX			;41
	INX
	RTS

* REPEAT CALL.

FDOAGN	LDX	0,X			;PT TO DISPLACEMENT BYTE
	STX	FCMDPT			;35
	LDX	#FTOR			;JUMP RTN IS NEXT
	STX	FVECT+1
	NOP
	RTS				;50

* FIN DOES  REPEAT CALL, RETURN TO CALLER, STOP RTN DEPENDING ON STACK.

FINR	LDAA	FSTK+1
	CMPA	#FBTM
	BLS	ALLDON			;9	LAST END STATEMENT

	LDX	FSTK
	DEC	2,X			;NO, CHECK TOP OF STACK
	BPL	FDOAGN			;24	STILL REPEATING

	SUBA	#3
	STAA	FSTK+1
	LDX	#FRTURN			;ELSE RETURN
	STX	FVECT+1			;38
	TST	0,X
	RTS

ALLDON	LDX	#WAST50
	STX	FVECT+1
	NOP				;19
	BRA	WAST27

WAST50	INX
	INX
	NOP
WAST40	BSR	WAST5
WAST27	BSR	WAST5
WAST14	TST	0,X
WAST7	NOP
WAST5	RTS

* CALL WITH REPEAT. REPEAT CNT 0(=1) TO 15 (=16) IS LO 4 BITS OF OPCODE.
* NEXT BYTE IS DISPLACEMENT AS IN GO INSTRUCTION.  THE CTR AND RETURN
* ADDRESS ARE SAVED ON A STACK.

FDOR	LDX	FSTK
	LDAA	FCMDPT			;SAVE ADDR OF DISPLACEMENT BYTE
	STAA	3,X
	LDAA	FCMDPT+1
	STAA	4,X
	LDAA	FCMD
	ANDA	#15
	STAA	5,X			;33

	INX
	LDX	#1$
	STX	FVECT+1
	RTS				;50

* OVERLAY FOR CALL RTN.

1$	LDAA	FSTK+1
	ADDA	#3
	STAA	FSTK+1
	LDX	#FTOR
	STX	FVECT+1 		;17	GET READY TO JUMP
	NOP
	BRA	WAST27

* GET NEXT FILTER COMMAND

NXTFCM	TST	FCNT
	BNE	WAST40			;IN A DELAY

	LDX	FCMDPT
	LDAA	0,X
	INX
	STX	FCMDPT
	STAA	FCMD
	BPL	1$			;36

	STAA	FCNT			;NEGATIVE CMD IS NEG OF WAVE DELAY
	LDAA	0,X
	RTS				;50

1$	LDX	#EXFCMD			;POSITIVE IS FROM TABLE
	FCB	-1,0,FVECT+1
	RTS				;50


EXFCMD	CLRB
	LDAA	FCMD
	ANDA	#$70			;B4 - B7 IS INSTRUCTION
	LSRA
	LSRA
	LSRA
	ADDA	#FCMDJT&255
;;	ADCB	#FCMDJT/256
	ADCB	#$F3			;;(#FCMDJT/256 was showing up as $F4)
	STAB	FNHI
	STAA	FNLO			;25

	LDX	FNHI	
	LDX	0,X
	STX	FVECT+1
	STX	FVECT+1
	RTS				;50

* SET UP FOR REPEATED TABLE ADD.

ETBR	LDAA	FCMD
	ANDA	#15
	INCA
	INCA
	STAA	FCNT
	BRA	FHA1			;17

* LOOK FOR A NONZERO HARMONIC CHANGE AND PERFORM IT.  IF ENTIRE TABLE
* IS ZERO WE HAVE FINISHED THE LAST COMMAND AND PICK UP THE NEXT ONE.

FINDHA	INC	HAPTR+1
	LDX	HAPTR
	CPX	#CNAMP			;END TABLE?
	BEQ	FHA1			;17
	
	LDAA	0,X			;NO, LOOK AT CURRENT ENTRY
	LDX	#ADDINI
	STAA	HAMP
	BEQ	*+5
	JMP	*+6
	LDX	#FINDHA			;LOOK AGAIN IF 0
	STX	FVECT+1			;SET FOR ADD IF <>0
	INX
	RTS

FHA1	LDAA	#ADD2HA-2		;RESTART TABLE
	FCB	$B7,0,HAPTR+1
	LDX	#FINDHA			;MAYBE REPEAT
	DEC	FCNT
	BEQ	*+5
	JMP	*+6
FCMDNX	LDX	#NXTFCM			;40
	STX	FVECT+1
	RTS

* RELATIVE JUMP.

FTOR	LDX	FCMDPT
	CLRB
	LDAA	0,X
	INCA				;DISPLACEMENT IS FROM NEXT INSTRUCTION
	ASRA
	ROLA
	SBCB	#0
	ADDA	FCMDPT+1
	ADCB	FCMDPT
	STAA	FCMDPT+1
	STAB	FCMDPT

	BRA	FCMDNX			;37

* SET UP FOR ADD OF HAMP * HARMONIC TO WAVE.

ADDINI	LDAA	HAPTR+1
	SUBA	#ADD2HA-1
	ASLA
	CLRB
	ADDA	HRMTBL+1		;GET PTR TO HARMONIC IN FNHI, FNLO
	ADCB	HRMTBL
	STAB	FNHI
	STAA	FNLO			;23

	LDAA	#128
	STAA	FMSK
	
	LDX	#2$
	STX	FVECT+1 		;37
	LDX	#WAVSRT
	STX	FWVPTR
	RTS

2$	LDX	FNHI			;GET HARMONIC FN TO FNHI,FNLO
	LDX	0,X
	STX	FNHI
	LDX	#ADDLP
	STX	FVECT+1			;23

	LDX	HAPTR
	LDAA	9,X
	ADDA	HAMP
	STAA	9,X			;41	RECORD CHANGE
	INX
	RTS

* ADD HAMP * HARMONIC FN TO WAVEFORM.

ADDLP	LDAA	FMSK			;MSK PTS TO CURRENT HARMONIC VALUE
	BEQ	1$			;NEED NEW MASK AFTER 8 SAMPLES

	LSR	FMSK
	LDX	FWVPTR
	LDAB	0,X
	ANDA	FNHI			;ADD/SUBTRACT HAMP FROM SAMPLE ON
	BNE	2$			;29		SIGN OF HARMONIC.
	FCB	-5,0,HAMP
	STAB	0,X
	INC	FWVPTR+1
	RTS				;50

2$	FCB	-16,0,HAMP
	STAB	0,X
	INC	FWVPTR+1
	RTS

1$	LDAB	FWVPTR+1
	CMPB	#WAVSRT+16
	BEQ	3$			;16	DONE
	LDAB	FNLO
	STAB	FNHI			;ELSE SET FOR NEXT 8 SAMPLES
	LDAB	#128
	FCB	-9,0,FMSK
	BRA	16$			;34

3$	LDX	#NXTFCM			;RETURN TO THE RIGHT PLACE
	LDAB	FCNT
	BNE	*+5			;FCNT <>0 MEANS IN TABLE LOOP
	JMP	*+6			;FCNT = 0 MEANS EXECUTING COMMANDS
	LDX	#FINDHA
	STX	FVECT+1 		;34

16$	TST	0,X
	INX
	RTS

* ADH H,N  LDH H,N  USE SAME RTN

ADHR
LDHR	LDAA	FCMD
	ANDA	#7			;HARMONIC #
	ADDA	#ADD2HA
	STAA	HAPTR+1

	LDX	FCMDPT
	LDAA	0,X
	INX
	STX	FCMDPT
	STAA	HAMP			;33	SAVE VALUE

	LDX	#1$
	STX	FVECT+1
	INX
	RTS

1$	LDX	HAPTR
	CLRB
	LDAA	FCMD
	ADDA	#-8			;CARRY IF LD
	SBCB	#0
	ANDB	9,X			;LD NEW = SUB OLD + ADD NEW
	NEGB
	ADDB	HAMP
	
ADHRE	STAB	HAMP			;27
	LDX	#ADDINI
	STX	FVECT+1
	INX
	INX
	NOP
	RTS	

* HARMONIC INCREMENT OR DECREMENT

HIDR	LDAB	FCMD
	LSRB
	ANDB	#7
	ORAB	#ADD2HA			;! ADD2HA MUST BE DIVISIBLE BY 8 !
	STAB	HAPTR+1			;PT TO THIS HARMONIC

	LDAB	#-1			;CARRY IF INCREMENT (BIT 0 OF FCMD = 1)
	ADCB	#0
	ADCB	#0
	BRA	ADHRE			;23

* CLEAR ADD2HA OR ALTER 0TH AMPLITUDE.

ZTBR	LDAA	FCMD			;LO BIT 0 IF ZT
	ASRA
	BCS	ADCR

	LDX	#0
	STX	ADD2HA
	STX	ADD2HA+2
	STX	ADD2HA+4
	STX	ADD2HA+6 		;32
	INX

ATBRE	LDX	#NXTFCM
	FCB	-1,0,FVECT+1
ATBRE1	RTS

ADCR	BITA	#2
	BNE	ESC1			;15	BIT 2 FCMD =1 FOR ESCAPE
	LDAB	#ADD2HA-1
	STAB	HAPTR+1			;21
	LDX	#ADCRO
ADCRE	STX	FVECT+1
	JMP	WAST14

ESC1	FCB	-2,0,FCMDPT
	BRA	ADCRE			;24	

ADCRO	CLRB
	LDAA	FCMD
	ADDA	#-82			;CARRY IF LDH
	SBCB	#0
	ANDB	CNAMP
	LDX	FCMDPT
	LDAA	0,X
	INX
	STX	FCMDPT			;30
	SBA
	STAA	HAMP
	LDX	#ADDINI
	FCB	-1,0,FVECT+1
	RTS

* CHANGE SOME ADD2HA ENTRIES.

LDTR	LDAB	#ADD2HA			;ASSUME FIRST ENTRY IS H #8
	STAB	HAPTR+1
	LDX	FCMDPT
	LDAB	0,X			;EACH BIT INDICATES PRESENCE OF ENTRY
	STAB	FNHI
	INX
	STX	FCMDPT			;28
	LDAB	FCMD			;LO BIT 1 IF ENTRY FOR 0 IS PRESENT
	LSRB
	BCC	5$
	LDX	#6$
	STX	FVECT+1
	RTS

4$	CLRB
	LDAA	FNLO			;LO BIT 0 IF REPLACE, 1 IF ADD TO CURRENT
	ASRA
	SBCB	#0
	LDX	HAPTR
	ANDB	0,X
	ABA
	STAA	0,X			;26
	INC	HAPTR+1			;PT TO NEXT GUY
	LDAA	0,X

5$	LDX	#1$
	STX	FVECT+1
	RTS

1$	ASL	FNHI
	BCS	2$
	BEQ	3$			;NO MORE IF 0
	INC	HAPTR+1
	JMP	WAST27

3$	JSR	FCMDNX			;36
	TST	0,X
	NOP
	RTS

6$	DEC	HAPTR+1			;SET FOR 0TH ENTRY
	INX

2$	LDAA	0,X
	LDX	FCMDPT
	LDAA	0,X
	INX
	STX	FCMDPT			;33
	STAA	FNLO
	LDX	#4$
	STX	FVECT+1
	RTS
			

* FILTER TIMING
* COMMAND	# OF FILTER CALLS TO EXECUTE

* LDH, ADH	24

* LDT, ADT	3+(2*N)  (N = # OF ENTRIES ALTERED)

* ZT		3

* DT  R		3+(R*{ 9+(22*NZH)})  WHERE
*		R IS # OF TABLE REPEATS
*		NZH IS # OF NONZERO ADD2HA ENTRIES

* IH, DH	23

* FIN		4  ( SAME FOR REPEAT AND RETURN)

* DO		5

* TO		3

* WAIT N	1+ (N* WAVE PERIOD)



 SUBTTL SOUND PROGRAMS

* OPCODES ( ! SEPERATES NYBBLES  SPACES SEPERATE BYTES)

* COMMON
* WAIT N	-N		( 1<= N<= 127)
* DO R,RTN	$6!(R-1)  RTN - NEXT LOC
* TO RTN	$70   RTN - NEXT LOC
* ESC		$55

* FREQUENCY CONTROL
* STOP		$80
* LDP N		$01 N
* ADP N		$00 N
* LDV N		$2!(N&$F00) N&255
* ADV N		$3!(N&$F00) N&255
* LDO N		$11 N
* ADO N		$10 N

* WAVE CONTROL
* FIN		$40
* ZT		$50
* ADH 0,N	$51 N
* LDH 0,N	$53 N
*	( IN WHAT FOLLOWS 1<=H<=8  HHH = 8-H, A 3 BIT NUMBER)
* ADH H,N	$0!0HHH
* LDH H,N	$0!1HHH
* IH H		$3!HHH1
* DH H		$3!HHH0
* DT R		$2!(R-1)
* LT A0,...,A8	$1!000C 8765!4321 B0,...,B8
*		WHERE C=1 IF ENTRY 0 IS ALTERED
*		      N=1 IF ENTRY N IS ALTERED (N=1,...,8)
*		BN=AN+AN+P WHERE P=1 IF AN IS TO BE ADDED TO ENTRY N
*				 P=0 IF AN REPLACES ENTRY N
*		BN IS PRESENT ONLY IF ENTRY N IS TO BE ALTERED

* HARMONIC FUNCTIONS.  EACH BIT POSITION CORRESPONDS TO A WAVEFORM
* POSITION.  IF THE BIT = 0, THE VALUE IS +1  IF THE BIT = 1, THE
* VALUE IS -1.

* THE HARMONICS ARE TREATED IN ORDER OF DECREASING AVERAGE FREQUENCY.

;;JOUST'S ODDTBL
;; FDB %0000000000000000	;0  CONSTANT IS WEIRDO FOR NOW
;; FDB %0101010101010101	;8
;; FDB %1010101001010101	;7
;; FDB %0101101001011010	;6
;; FDB %1001011001101001	;5
;; FDB %0110011001100110	;4
;; FDB %1100110000110011	;3
;; FDB %0011110000111100	;2
;; FDB %0000111111110000	;1
;;JOUST ODDTBL @ $FE88
;;00 00 55 55 AA 55 5A 5A 96 69 66 66 CC 33 3C 3C 0F F0
;;SINISTAR ODDTBL @ $F5D1
;;00 00 00 00 AA AA 0F F0 C3 F0 18 CF C7 A1 FF 00 00 FF
ODDTBL
 FDB %0000000000000000		;0  CONSTANT IS WEIRDO FOR NOW
 FDB %0000000000000000		;8
 FDB %1010101010101010		;7
 FDB %0000111111110000		;6
 FDB %1100001111110000		;5
 FDB %0001100011001111		;4
 FDB %1100011110100001		;3
 FDB %1111111100000000		;2
 FDB %0000000011111111		;1
 

* WAVE PROGRAMS

;;
;;	(Sinistar Error Roar Wave Commands)
;;
EROARW	FDB	$5380		;;LDH	0,80
	FDB	$0888		;;LDH 	H,N?
	FDB	$0A10		;;LDH 	6,16
	FDB	$0908		;;LDH 	7,8
	FDB	$0B10		;;LDH 	5,16
	FDB	$0C20 		;;LDH 	4,32
	FDB	$0C05		;;LDH 	4,5
ERLP$	FDB	$1080 		;;LT 	0,<8,-15> (3-byte opcode)
	FCB	$F0		;; 	||
	FCB	$23		;;DT 	4
	FDB	$1080		;;LT 	0,<8,10>?
	FCB	$10		;;	||
	FCB	$23		;;DT 	4
	FDB	$70F6		;;TO	ERLP$
;;
;;	(Sinistar Error Roar Pitch Commands)
;;
EROARP	FDB	$962E,$00EC
	FDB	$2200,$EC80 
	FDB	$20F6
	FCB	$80		;;STOP
;;
;;	(Extra Ship Wave Commands)
;;
EXTRAW	FDB	$5300		;;LDH	0,0
	FDB	$0A05		;;LDH 	6,5?
	FCB	$FB		;;WAIT	5
	FDB	$5380		;;LDH	0,80
	FDB	$0A1F		;;LDH 	6,31?
	FDB	$6F03		;;DO 	16,EXSWLP$
	FDB	$6E01		;;DO 	15,EXSWLP$
	FCB	$40		;;FIN
EXSWLP$	FDB	$1060		;;LT ?
	FDB	$0002		;;	||
	FCB	$23		;;DT 	4
	FDB	$1040 		;;LT 	0,<7,-1>
	FCB	$FE		;;	($1040FE is actually used in Joust)
	FCB	$22		;;DT 	3
	FDB	$1020 		;;LT ?
	FCB	$FE		;;	||
	FCB	$20		;;DT 	1
	FCB	$40		;;FIN
;;
;;	(Extra Ship Pitch Commands)
;;
EXTRAP	FCB	$64		;;(loads into SMPPER, inital pitch)
	FDB	$6F03		;;DO 	16,EXSPLP$
	FDB	$6F01		;;DO 	16,EXSPLP$
	FCB	$80		;;STOP
EXSPLP$	FDB	$2100		;;LDV 	N,N
	FCB	$FC		;;	||
	FDB	$2F00		;;LDV 	N,N
	FCB	$FC		;;	||
	FCB	$80 		;;STOP
;;
;;	(Unused Wave Commands)
;;
UNUSEDW	FDB	$5300,$09FF 
	FDB	$FB6F,$036E 
	FDB	$0140,$1040
	FDB	$FC20,$1041
	FDB	$0002,$2310
	FDB	$01FE,$2350
	FCB	$40
;;
;;	(Unused Pitch Commands)
;;
UNUSEDP	FDB	$7DCE,$CE80

WALSHT	FDB	EROARW,EROARP		;;(Sinistar Error Roar - plays only when speech board is disconnected)
	FDB	EXTRAW,EXTRAP	 	;;(Extra Ship Sound Effect)
	FDB	UNUSEDW,UNUSEDP		;;(Unused Waveform and Pitch Program - Just two notes, same pitch)
	FDB	EXTRAW,UNUSEDP		;;(Unused Pitch Program with Extra Ship Waveform)
	FDB	EXTRAW,EROARP		;;(Unused Alternate Error Roar with Extra Ship Waveform)

WALSH	CLRB
	STAB	SMPPER+1
	ASLA
	ASLA
	ADDA	#WALSHT&255		;;(originally #WALSHT!.255)
;;	ADCB	#WALSHT/256
	ADCB	#$F6			;;(#WALSHT/256 was showing up as $F7)
	STAB	PCMDPT
	STAA	PCMDPT+1
	LDX	PCMDPT
	LDX	0,X			;;(orignally just LDX	X)
	STX	FCMDPT
	LDX	PCMDPT
	LDX	2,X
	LDAB	0,X			;;(orignally just LDAB	X)
	STAB	SMPPER
	INX
	STX	PCMDPT
	LDX	#ODDTBL
	STX	HRMTBL
	JMP	WSM		
	END
